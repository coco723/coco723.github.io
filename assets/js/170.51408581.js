(window.webpackJsonp=window.webpackJsonp||[]).push([[170],{590:function(e,a,s){"use strict";s.r(a);var n=s(2),t=Object(n.a)({},(function(){var e=this,a=e._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"npm-依赖管理之-peerdependencies"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#npm-依赖管理之-peerdependencies"}},[e._v("#")]),e._v(" npm 依赖管理之 peerDependencies")]),e._v(" "),a("p",[e._v("插件开发中经常用到 peerDependencies")]),e._v(" "),a("h2",{attrs:{id:"npm2-中-dependencies-与-peerdependencies-区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#npm2-中-dependencies-与-peerdependencies-区别"}},[e._v("#")]),e._v(" npm2 中 dependencies 与 peerDependencies 区别")]),e._v(" "),a("p",[e._v("假设我们当前的项目是 MyProject，项目中有一些依赖，比方其中有一个依赖包 PackageA，该包的"),a("code",[e._v("package.json")]),e._v("文件指定了对 PackageB 的依赖：")]),e._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token string-property property"}},[e._v('"dependencies"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token string-property property"}},[e._v('"PackageB"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"1.0.0"')]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br")])]),a("p",[e._v("如果我们在我们的 MyProject 项目中执行"),a("code",[e._v("npm install PackageA")]),e._v(", 我们会发现我们项目的目录结构会是如下形式：")]),e._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("MyProject "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("node_modules "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("PackageA "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("node_modules "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("PackageB\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v('那么在我们的项目中，我们能通过下面语句引入"PackageA"：')]),e._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" packageA "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'PackageA'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("但是，如果你想在项目中直接引用 PackageB:")]),e._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" packageA "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'PackageA'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" packageB "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'PackageB'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("p",[e._v("这是不行的，即使 PackageB 被安装过；因为 Node 只会在"),a("code",[e._v("“MyProject/node_modules”")]),e._v("目录下查找 PackageB，它不会在进入 PackageA 模块下的"),a("code",[e._v("node_modules")]),e._v("下查找。")]),e._v(" "),a("p",[e._v("所以，为了解决这个问题，在 MyProject 项目"),a("code",[e._v("package.json")]),e._v("中我们必须直接声明对 PackageB 的依赖并安装。")]),e._v(" "),a("p",[e._v("但是，有时我们不用在当前项目中声明对 PackageB 的依赖就可以直接引用，尤其是，PackageA 是一个类似于 grunt 的插件，例如"),a("code",[e._v("grunt-contrib-jshint")]),e._v("。")]),e._v(" "),a("p",[e._v("为什么在项目中不用声明就可以直接使用呢？这就不得不说说"),a("code",[e._v("peerDependencies")]),e._v("的作用了。")]),e._v(" "),a("p",[e._v("peerDependencies 的引入\n为了解决这种问题：")]),e._v(" "),a("p",[e._v("于是 peerDependencies 就被引入了。例如上面 PackageA 的 package.json 文件如果是下面这样：")]),e._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token string-property property"}},[e._v('"peerDependencies"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token string-property property"}},[e._v('"PackageB"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"1.0.0"')]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br")])]),a("p",[e._v("那么，它会告诉 npm：如果某个 package 把我列为依赖的话，那么那个 package 也必需应该有对 PackageB 的依赖。")]),e._v(" "),a("p",[e._v("也就是说，如果你"),a("code",[e._v("npm install PackageA")]),e._v("，你将会得到下面的如下的目录结构：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("MyProject\n|- node_modules\n   |- PackageA\n   |- PackageB\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br")])]),a("p",[e._v("你可能注意到：")]),e._v(" "),a("p",[e._v("在 npm2 中，即使当前项目 MyProject 中没有直接依赖 PackageB，该 PackageB 包依然会安装到当前项目的"),a("code",[e._v("node_modules")]),e._v("文件夹中。")]),e._v(" "),a("p",[e._v("下面的代码现在可以正常工作了，因为两个包在"),a("code",[e._v('"MyProject/node_modules"')]),e._v("中被安装了：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var packageA = require('PackageA')\nvar packageB = require('PackageB')\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("p",[e._v("总结一句话，"),a("code",[e._v("peerDependencies")]),e._v("的具体作用：")]),e._v(" "),a("p",[a("code",[e._v("peerDependencies")]),e._v("的目的是提示宿主环境去安装满足插件"),a("code",[e._v("peerDependencies")]),e._v("所指定依赖的包，然后在插件 import 或者 require 所依赖的包的时候，永远都是引用宿主环境统一安装的 npm 包，最终解决插件与所依赖包不一致的问题。")]),e._v(" "),a("p",[e._v("举个例子，就拿目前基于 react 的 ui 组件库 ant-design@3.x 来说，因该 ui 组件库只是提供一套 react 组件库，它要求宿主环境需要安装指定的 react 版本。具体可以看它 package.json 中的配置：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('  "peerDependencies": {\n    "react": ">=16.0.0",\n    "react-dom": ">=16.0.0"\n  }\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br")])]),a("p",[e._v("它要求宿主环境安装 react@>=16.0.0 和 react-dom@>=16.0.0 的版本，而在每个 antd 组件的定义文件顶部：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("p",[e._v("组件中引入的 react 和 react-dom 包其实都是宿主环境提供的依赖包。")]),e._v(" "),a("h2",{attrs:{id:"npm2-和-npm3-中-peerdependencies-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#npm2-和-npm3-中-peerdependencies-的区别"}},[e._v("#")]),e._v(" npm2 和 npm3 中 peerDependencies 的区别")]),e._v(" "),a("p",[e._v("正如上一节谈论的，在 npm2 中，PackageA 包中"),a("code",[e._v("peerDependencies")]),e._v("所指定的依赖会随着 npm install PackageA 一起被强制安装，所以不需要在宿主环境的"),a("code",[e._v("package.json")]),e._v("文件中指定对 PackageA 中 peerDependencies 内容的依赖。")]),e._v(" "),a("p",[e._v("但是在 npm3 中，"),a("code",[e._v("peerDependencies")]),e._v("的表现与 npm2 不同：")]),e._v(" "),a("p",[e._v("npm3 中不会再要求 peerDependencies 所指定的依赖包被强制安装，相反 npm3 会在安装结束后检查本次安装是否正确，如果不正确会给用户打印警告提示。")]),e._v(" "),a("p",[e._v("就拿上面的例子来说，如果我们"),a("code",[e._v("npm install PackageA")]),e._v("安装 PackageA 时，你会得到一个警告提示说：")]),e._v(" "),a("p",[e._v("PackageB 是一个需要的依赖，但是没有被安装。\n这时，你需要手动的在 MyProject 项目的 package.json 文件指定 PackageB 的依赖。")]),e._v(" "),a("p",[e._v("另外，在 npm3 的项目中，可能存在一个问题就是你所依赖的一个 package 包更新了它 peerDependencies 的版本，那么你可能也需要在项目的 package.json 文件中手动更新到正确的版本。否则会出现的警告信息：")])])}),[],!1,null,null,null);a.default=t.exports}}]);