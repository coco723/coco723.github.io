(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{476:function(t,e,s){"use strict";s.r(e);var a=s(2),r=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[t._v("官网里写了只在最顶层使用 Hooks。不要在循环，条件或嵌套函数中调用 Hook，确保总是在你的 React 函数的最顶层以及任何 return 之前调用他们。")]),t._v(" "),e("p",[t._v("在React中，组件的状态（state）是通过链表（linked list）来实现的，具体来说，React使用一种称为Fiber的数据结构来管理组件的状态和生命周期。Fiber架构是React 16引入的一种新的协调算法，用于更灵活地处理组件的更新、布局和渲染。")]),t._v(" "),e("h1",{attrs:{id:"fiber-架构简介"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fiber-架构简介"}},[t._v("#")]),t._v(" Fiber 架构简介")]),t._v(" "),e("p",[t._v("Fiber架构的核心思想是将组件的更新任务划分为可中断的小任务单元，通过这种方式实现了更细粒度的控制和优先级调度。Fiber树的节点即为这些任务单元，每个节点表示一个虚拟DOM节点或组件")]),t._v(" "),e("p",[t._v("在Fiber架构中，React的状态（state）以链表的形式组织，这个链表被称为“Fiber链”。每个Fiber节点都包含了组件的状态以及更新、渲染相关的信息。")]),t._v(" "),e("h2",{attrs:{id:"react-state链表的实现原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react-state链表的实现原理"}},[t._v("#")]),t._v(" React State链表的实现原理")]),t._v(" "),e("ol",[e("li",[e("strong",[t._v("Fiber节点的结构")]),t._v("： 每个Fiber节点都包含了与组件实例相关的状态，例如"),e("code",[t._v("memoizedState")]),t._v("用于存储组件的当前状态值。此外，Fiber 节点中还包含了与任务调度、更新等相关的信息。")]),t._v(" "),e("li",[e("strong",[t._v("单链表的形式：")]),t._v(" Fiber 链表实际上是一个单向链表，每个 Fiber 节点通过 "),e("code",[t._v("return")]),t._v("、"),e("code",[t._v("child")]),t._v("、"),e("code",[t._v("sibling")]),t._v(" 等指针形成链式结构。"),e("code",[t._v("return")]),t._v(" 指向父节点，"),e("code",[t._v("child")]),t._v(" 指向第一个子节点，"),e("code",[t._v("sibling")]),t._v(" 指向兄弟节点。")]),t._v(" "),e("li",[e("strong",[t._v("状态更新与链表的关系：")]),t._v(" 当组件的状态发生变化时，React 会通过 Fiber 链表中的某个节点（通常是根节点）开始遍历整个链表，执行任务单元，完成组件的更新。")]),t._v(" "),e("li",[e("strong",[t._v("优先级调度：")]),t._v(" Fiber 架构中引入了优先级调度的概念，每个 Fiber 节点都有一个 "),e("code",[t._v("expirationTime")]),t._v(" 字段，表示任务的过期时间。React 根据任务的优先级和过期时间来决定任务的执行顺序，保证高优先级的任务先执行。")])]),t._v(" "),e("h2",{attrs:{id:"部分源代码示意"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#部分源代码示意"}},[t._v("#")]),t._v(" 部分源代码示意")]),t._v(" "),e("p",[t._v("以下是 React 源代码的简化示意，用于说明 Fiber 节点的一些关键字段：")]),t._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ReactFiber.js")]),t._v("\n\ntype Fiber "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("tag")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" WorkTag"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("                "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 节点类型，如函数组件、类组件等")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("key")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" string"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("          "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// React 元素的 key")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("elementType")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" any"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("            "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 元素类型，如 div、span")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("type")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" any"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("                   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对应的组件类型，如函数组件、类组件的函数")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("stateNode")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" any"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("              "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 与节点关联的实例，即组件实例")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Fiber "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 父节点")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("child")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Fiber "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("         "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 第一个子节点")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("sibling")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Fiber "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("       "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 下一个兄弟节点")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ... 其他字段")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br")])]),e("h2",{attrs:{id:"协调-reconciliation"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#协调-reconciliation"}},[t._v("#")]),t._v(" 协调（Reconciliation）")]),t._v(" "),e("p",[t._v("协调是指 React 如何处理组件的更新。在 Fiber 架构中，协调是通过遍历 Fiber 树来实现的。")]),t._v(" "),e("ol",[e("li",[e("strong",[t._v("深度优先遍历：")]),t._v(" React 使用深度优先遍历算法遍历 Fiber 树。从根节点开始，沿着子节点遍历，直到叶子节点，然后再返回上一层，处理兄弟节点。")]),t._v(" "),e("li",[e("strong",[t._v("任务单元（UnitOfWork）：")]),t._v(" 协调过程中，每个 Fiber 节点都表示一个任务单元。React 通过任务单元的形式将更新任务划分为小单元，可以中断和恢复。每个任务单元有自己的过期时间（"),e("code",[t._v("expirationTime")]),t._v("），React 根据过期时间决定任务的优先级。")]),t._v(" "),e("li",[e("strong",[t._v("任务调度：")]),t._v(" 通过任务调度器，React 能够根据任务的优先级和过期时间动态调整任务的执行顺序。这使得 React 能够在保证用户界面流畅性的同时，更灵活地响应不同任务的优先级。")])]),t._v(" "),e("h2",{attrs:{id:"双缓存-dubble-buffering"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#双缓存-dubble-buffering"}},[t._v("#")]),t._v(" 双缓存（Dubble Buffering）")]),t._v(" "),e("p",[t._v("在 React Fiber 中，使用双缓存技术来实现高效的渲染。主要有两个 Fiber 树：当前 Fiber 树和工作中的 Fiber 树。")]),t._v(" "),e("ol",[e("li",[e("strong",[t._v("当前 Fiber 树：")]),t._v(" 表示当前渲染到屏幕上的界面。React 通过调度器动态地更新当前 Fiber 树。")]),t._v(" "),e("li",[e("strong",[t._v("工作中的 Fiber 树：")]),t._v(" 在协调过程中，React 对组件树进行的所有更改都在工作中的 Fiber 树上进行。一旦协调完成，工作中的 Fiber 树成为下一次渲染的当前 Fiber 树。")])]),t._v(" "),e("h3",{attrs:{id:"任务执行阶段"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#任务执行阶段"}},[t._v("#")]),t._v(" 任务执行阶段")]),t._v(" "),e("p",[t._v("在 React Fiber 中，任务执行分为三个主要阶段：")]),t._v(" "),e("ol",[e("li",[e("strong",[t._v("Reconciliation 阶段：")]),t._v(" 负责协调更新，构建工作中的 Fiber 树。")]),t._v(" "),e("li",[e("strong",[t._v("Commit 阶段：")]),t._v(" 将工作中的 Fiber 树的更改同步到当前 Fiber 树，并执行真正的 DOM 操作。")]),t._v(" "),e("li",[e("strong",[t._v("Layout 阶段：")]),t._v(" 负责计算布局信息，生成 DOM 树，但并不实际插入到页面中。")])]),t._v(" "),e("h3",{attrs:{id:"源代码结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#源代码结构"}},[t._v("#")]),t._v(" 源代码结构")]),t._v(" "),e("p",[t._v("Fiber 相关的核心源代码主要位于 "),e("code",[t._v("ReactFiber.js")]),t._v("、"),e("code",[t._v("ReactFiberWorkLoop.js")]),t._v("、"),e("code",[t._v("ReactFiberReconciler.js")]),t._v(" 等文件中。这些文件包含了任务调度、协调算法、任务执行阶段的具体实现。")])])}),[],!1,null,null,null);e.default=r.exports}}]);